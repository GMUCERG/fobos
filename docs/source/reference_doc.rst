API Reference
*************

Here we provide documentation for important classes and methods.

Basys3Ctrl Class (controller)
-----------------------------

.. py:class:: fobos.Basys3Ctrl(self, port, baudRate=115200, dummy=False)
        
        Class to interface with Basys3 controller.

        :param str port: The serial port where the Basys3 board is connected(e.g /dev/ttyUSB1).
        :param int baudRate: Baud rate. Default is 115200.
        :param bool dummy: When set to true, no communication with Basys3 is done.
                           This is to test the software only. Default is False.

        .. py:method:: processData(self, data, outLen)

            Sends data to FOBOS hardware for processing, e.g. encryption
            
            :param str data: The data to be processed. This is a hexadecimal string.
            :rtype (str, str):
            :return: (Status ("00000000" OK | "20000000" TIMOUT) , Result from DUT (i.e. ciphertext))

        .. py:method:: setOutLen(self, outLen)

            set DUT Expected Output Length (result length) in bytes.
             
            :param int outLen: The number of output bytes to be returned by the DUT (e.g 16 for AES-128).
            :rtype int:
            :return: Status.

        .. py:method:: setTriggerWait(self, trigWait)

            Set number of trigger wait cycles

            :param trigWait int: The number of DUT cycles after di_ready goes to 0 to issue the trigger.
            :rtype: int
            :return: Status

        .. py:method::setTriggerLen(self, trigLen)
             
            set the number of DUT cycles to keep the trigger at logic-1.

            :param int trigLen: The number of DUT cycles to keep trigger set.
            :rtype: int
            :return: Status

        .. py:method:: setTriggerMode(self, trigType)
            Set trigger mode.

            :param int: trigType. Possible values (TRG_NORM = 0 | TRG_FULL = 1 | TRG_NORM_CLK = 2 | TRG_FULL_CLK = 3)
            :rtype: int
            :return: Status

         .. py:method:: setTimeToReset(self, dutCycles)
            
            set number of clock cycles after di_ready goes to 0 to reset the DUT.
            
            :param int dutCycles: The number of DUT cycles to reset the DUT.
            :rtype: int
            :return: Status.

        .. py:method:: setTimeout(self, seconds)

            set number of seconds to stop waiting for DUT result.

            :param in seconds: Time in seconds. Range 1-40 seconds.
            :rtype: int
            :return: Status

        .. py:method:: enableTestMode(self)

            Enable test mode. When this mode is enabled, the controller sends test-vectors to its internal dummy DUT.

            :rtype: int
            :return: Status

        .. py:method:: disableTestMode(self)

            Disable test mode. In this mode the ctrl board uses the real DUT. This is the default mode.

            :rtype: int
            :return: Status

        .. py:method:: forceReset(self)

            Reset DUT and clear current communication with DUT.

            :rtype: int
            :return: Status

        .. py:method:: releaseReset(self)

            Release  DUT reset signal

            :rtype: int
            :return: Status

        .. py:method:: setDUTClk(self, clkFreqMhz)
    
            Set DUT clock frequency generated by the control board. Range is between 0.4 MHz - 100 MHz.

            :param float clkFreqMhz: The DUT clock frequency in Mhz.
            :rtype: int
            :return: Status

Scope (Picoscope Class)
-----------------------

.. py:class:: Picoscope(self, sampleResolution=8, preTriggerSamples=0, postTriggerSamples=1000)
        
        A class to interface with the Picoscope oscilloscope.

        .. py:method:: __init__(self, sampleResolution=8, preTriggerSamples=0, postTriggerSamples=1000)

            Open oscilloscope
            
            :param int sampleResolution: The number of bits used to represent each sample. Possible values 8, 12, 14, 15 and 16.
            :param int preTriggerSamples: The number of samples before the trigger to return to the user.
            :param int postTriggerSamples: The number of samples after the trigger to return to the user.

        .. py:method:: setChannel(self, channelName='CHANNEL_A', coupling='DC', rangemv='1V')

            Configure voltage range and coupling for a channel.

            :param str channelName: The name of the oscilloscope channel (CHANNEL_A | CHANNELB).
            :param str coupling: Select DC/AC coupling (DC | AC)
            :param str rangemv: The voltage range for the selected channel (10mV|20mV|50mV|100mV|200mV|500mV|1V|2V|5V|10V|20V)

        .. py:method:: setSamplingInterval(self, samplingIntervalns)

            Sets the sampling interval (time between samples T) in nano seconds. Sampling rate = 1/T.

            :param int samplingInterval: Sampling interval (time between samples T) in nano seconds. Sampling rate = 1/T.

        .. py:method:: setTrigger(self, channelName= 'CHANNEL_A', thresholdmv = 500, direction = 'RISING_EDGE', autoTriggerDelay = 2000)

            Configure trigger channel.

            :param str channelName: The channel to use as a trigger channel (CHANNEL_A | CHANNELB | EXTERNAL).
            :param int thresholdmv: The minimum level of voltage to assert a trigger.
            :param str direction: The trigger signal direction (RISING_EDGE| FALLING_EDGE).
            :param int autoTriggerDelay: Time in milliseconds after which auto trigger occurs (i.e start storing data even if no valid trigger received).


        .. py:method:: setDataBuffers()

            Allocates memory buffers to store oscilloscope data.

ProjectManager Class
--------------------

.. py:class:: ProjectManager()
    
    A class to facilitate organizing and saving results files/data files in automatically created directories. For example, when new capture is performed a directory named attempt-[number] will be created in the capture directory.

    .. py:method:: setWorkSpaceDir(self, workSpaceDir)

        Sets the directory where all data will be saved.

        :param str workSpaceDir: Workspace directory path.

    .. py:method:: setProjName()

        Sets the project name.

        :param str projectName: Project name. A directory will be created in the workspace with the project name.

    .. py:method:: getProjDir()

        Gets the project directory path.

        :return: Full project directory path.

    .. py:method:: getCaptureDir()

        Creates and returns the path of a new directory created in *worksapce/projectName/capture/* the folder will be named *attempt-(number)* for uniqueness.

Nexy3DUT Class
--------------

.. py:class:: Nexys3DUT()

    A class to program Digilent Nexy3 DUT. This class requires that Digilent Adept command line tools (djtgcfg command) is installed.

    .. py:method:: setBitFile(bitFile)

        Sets the bit file name used to program the DUT FPGA.

        :param str bitFile: Full path of the .bit file to program the FPGA.

    .. py:method:: program()

        Programs the FPGA using the bit file specified using he setBitFile method.

CPA Class
---------

.. py:class:: CPA()

    A class to perform Correlation Power Analysis.

    .. py:method:: doCPA(self, measuredPower, hypotheticalPower, numTraces, analysisDir, MTDStride)

        Perform CPA.
    
        :param numpy_array measuredPower: The power measure using the oscilloscope.
        :param numpy_array hypotheticalPower: The hypotheticalPower estimated using the power model.
        :param int numTraces: Number of traces in to be analyzed.
        :param str analysisDir: Full path of the directory to store analysis results.
        :param int MTDStride: The number of traces to add in each step when plotting the MTD graph.
        
DataGenerator Class
------------------------------------------------------

.. py:class:: DataGenerator()

    A class to generate FOBOS-ready test vectors.

        .. py:method:: randTVFile(self, pdiLen, sdiLen, rdiLen, outLen, fileName, numTVs)

            Generate a FOBOS-ready test-vector file.

            :param int pdiLen: The lenght of PDI data (e.g plaintext) in bytes.
            :param int sdiLen: The lenght of SDI data (e.g secret key) in bytes.
            :param int rdiLen: The lenght of RDI data (random data) in bytes.
            :param int outLen: The lenght of expected output (e.g ciphertext) in bytes.
            :param str fileName: The name of the file to store the testvectors.

        .. py:method:: randTestVector(self, pdiLen, sdiLen, rdiLen, outLen)

            Generate a single FOBOS-ready test-vector.

            :param int pdiLen: The lenght of PDI data (e.g plaintext) in bytes.
            :param int sdiLen: The lenght of SDI data (e.g secret key) in bytes.
            :param int rdiLen: The lenght of RDI data (random data) in bytes.
            :param int outLen: The lenght of expected output (e.g ciphertext) in bytes.


